"""autogenerated by genpy from xsens/CalibrateRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CalibrateRequest(genpy.Message):
  _md5sum = "6bb73ea196686a0c6c1f47cec4e388ba"
  _type = "xsens/CalibrateRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
int32 ORIENTATION=1
int32 DRIFT=2

int32 kind
int32 samples

"""
  # Pseudo-constants
  ORIENTATION = 1
  DRIFT = 2

  __slots__ = ['kind','samples']
  _slot_types = ['int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       kind,samples

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CalibrateRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.kind is None:
        self.kind = 0
      if self.samples is None:
        self.samples = 0
    else:
      self.kind = 0
      self.samples = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2i.pack(_x.kind, _x.samples))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.kind, _x.samples,) = _struct_2i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2i.pack(_x.kind, _x.samples))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.kind, _x.samples,) = _struct_2i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2i = struct.Struct("<2i")
"""autogenerated by genpy from xsens/CalibrateResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class CalibrateResponse(genpy.Message):
  _md5sum = "e176c7fa8cadfc517116f2eec0643305"
  _type = "xsens/CalibrateResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Vector3 compensation



================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
"""
  __slots__ = ['compensation']
  _slot_types = ['geometry_msgs/Vector3']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       compensation

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CalibrateResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.compensation is None:
        self.compensation = geometry_msgs.msg.Vector3()
    else:
      self.compensation = geometry_msgs.msg.Vector3()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3d.pack(_x.compensation.x, _x.compensation.y, _x.compensation.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.compensation is None:
        self.compensation = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.compensation.x, _x.compensation.y, _x.compensation.z,) = _struct_3d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3d.pack(_x.compensation.x, _x.compensation.y, _x.compensation.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.compensation is None:
        self.compensation = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.compensation.x, _x.compensation.y, _x.compensation.z,) = _struct_3d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3d = struct.Struct("<3d")
class Calibrate(object):
  _type          = 'xsens/Calibrate'
  _md5sum = '728ba486b30d3957849534789a026b96'
  _request_class  = CalibrateRequest
  _response_class = CalibrateResponse
